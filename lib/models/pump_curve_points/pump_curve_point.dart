//Metric values default input

import 'dart:math';

import 'package:hive/hive.dart';
import 'package:variable_speed_pump/utils/constants.dart';

part 'pump_curve_point.g.dart';

@HiveType(typeId: 1)
class PumpCurvePoint {
  PumpCurvePoint();

  ///revolutions per minute
  @HiveField(0)
  late final double rpm;

  ///flow in mÂ³/h
  @HiveField(1)
  late final double flow;

  ///head in m
  @HiveField(2)
  late final double head;

  ///efficiency of the pump end (eta) 0 to 1.0: wHp/bHp
  @HiveField(3)
  late final double pumpEndEff;

  ///hydraulic horse power: power generated by the pump end at that hydraulic point
  double get wHp => flow * head / wHPFactorM_M3H;

  ///brake horse power: required power in the axis of pump end to generate this hydraulic point
  double get bHp => wHp / pumpEndEff;

  ///hydraulic power in kW
  double get wkW => wHp * kWtoHPFactor;

  ///brake power in kW
  double get bkW => bHp * kWtoHPFactor;

  ///kWh used to pump a m3 with the given head and efficiency
  double get kWhrequired => wkW / flow;

  static const double wHPFactorM_M3H = (3600 / gravity) *
      kWtoHPFactor; //time factor sec to hour, gravity, kw to HP factor
  static const double wHPFactorFt_GPM = 3960;

  PumpCurvePoint.withEfficiency(
      {this.rpm = 3600,
      this.flow = 0,
      this.head = 0,
      required this.pumpEndEff});

  PumpCurvePoint.withBHPower(
      {this.rpm = 3600, this.flow = 0, this.head = 0, required double bHp}) {
    this.pumpEndEff = this.wHp / bHp;
  }

  static double estimateWhp(double flow, double head) =>
      flow * head / wHPFactorM_M3H;

  PumpCurvePoint withLowerSpeed(double percentage) {
    //Uses the affinity laws to estimate a new lower speed point
    if (percentage < 0)
      return this; //if percentage is negative, should return a copy of the current unmodified
    double newFlow = this.flow * percentage;
    double newHead = this.head * pow(percentage, 2);
    double rpm = this.rpm * percentage;

    return PumpCurvePoint.withEfficiency(
        pumpEndEff: this.pumpEndEff, flow: newFlow, head: newHead, rpm: rpm);
  }

  PumpCurvePoint withLowerRPM(double rpm) {
    double percentage = rpm / this.rpm;
    return this.withLowerSpeed(percentage);
  }
}
